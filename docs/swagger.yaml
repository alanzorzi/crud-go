definitions:
  model.User:
    properties:
      age:
        type: integer
      email:
        example: test@test.com
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - age
    - email
    - id
    - name
    - password
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Allows a user to log in and receive an authentication token.
      parameters:
      - description: User login credentials
        in: body
        name: userLogin
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, authentication token provided
          headers:
            Authorization:
              description: Authentication token
              type: string
          schema:
            $ref: '#/definitions/model.User'
        "403":
          description: 'Error: Invalid login credentials'
          schema:
            type: string
      summary: model.User.email User.email
      tags:
      - Authentication
  /user/{userId}:
    get:
      consumes:
      - application/json
      description: Retrieves user details based on the user ID provided as a parameter.
      parameters:
      - description: ID of the user to be retrieved
        in: path
        name: userId
        required: true
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            type: string
        "400":
          description: 'Error: Invalid user ID'
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Find User by ID
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves user details.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            type: string
        "400":
          description: Bad Request
      summary: Find Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided user information
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User information for registration
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a new user
      tags:
      - Users
  /users/{userId}:
    delete:
      consumes:
      - application/json
      description: Deletes a user based on the ID provided as a parameter.
      parameters:
      - description: ID of the user to be deleted
        in: path
        name: userId
        required: true
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Delete User
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user details based on the ID provided as a parameter.
      parameters:
      - description: ID of the user to be updated
        in: path
        name: userId
        required: true
        type: string
      - description: User information for update
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/model.User'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update User
      tags:
      - Users
swagger: "2.0"
